  /**
  
    1 - Need for Executor : 
    
    Every time a task is executed a Thread is created 
    Creating and starting a thread can be an expensive process
   
    Example : Below code creates 100 separate OS threads
         for(i=0;i<100;i++){
           thread.start()
         }
    
   
    Thread Pool Advantage :
    
    So,Create a fixed number of threads in a Thread-Pool,say 10 threads created in a thread Pool.
    submit 100 tasks to them ,
    All 10 threads execute the task and returns back to Pool.
    These IDLE threads in the pool can be reused to execute pending tasks
    
    This mechanism is especially helpful in systems that execute a large number of small tasks.
   
 
   --------------------------------------------------------------------------------------------------------------------
   
   2 - Java Implementation of Thread Pools : 
   
      I)The Executors class and Executor interface :  Now the Types of Thread Pools created using Executors are 
	   >Executors.newFixedThreadPool(10)     : Creates a Fixed thread pool
	   >Executors.newCachedThreadPool()      : Creates a Expandable(On Demand) thread pool 
	   >Executors.newSingleThreadExecutor()  : Creates an Executor woth only One single worker thread : used in sequential execution of tasks 
	   >Executors.newScheduledThreadPool(10) : Creates a thread pool that can schedule commands to run after a given delay, or to execute periodically.

       II)Fork-Join Pool 
          The fork/join framework is based on a “work-stealing algorithm”. 
	  In simple terms, what this means is that threads that run out of tasks can “steal” work from other busy threads.
	  This “steal” work algorithm ensures that all CPUs are optimally used.
    
   */
 ------------------------------------ 1)newFixedThreadPool(int poolsize) ------------------------------------------
   
   
   
   - Creates a Fixed thread pool that 
     Reuses a Fixed number of threads i.e 
     Only 10 threads are created and a thread is used again only if IDLE
   
   - Use case : 
     : Can configure for CPU Intensive tasks : 

     : Integer coreCount = Runtime.getRuntime().availableProcessors();
       ExecutorService executor = Executors.newFixedThreadPool(coreCount);
   
   
   
 -----------------------------------------------  2)newCachedThreadPool()-------------------------------------------
   
   
   
  - Creates a Expandable having an expandable thread pool that 
    creates new thread when none of the previous created thread are IDLE, but will reuse previously constructed threads if IDLE
   
   
  - Use case :
    : suitable for applications that launch many short-lived tasks.

    : ExecutorService executor = Executors.newCachedThreadPool(); 
   
 

 -------------------------------------------------3)newSingleThreadExecutor()-----------------------------------------

  
  - Creates an Executor woth only One single worker thread
  
  - Use case : 
    : As you have only one Thread to handle all your request
      You want to execute the submitted tasks in a sequence.
   
    : ExecutorService executor = Executors.newSingleThreadExecutor();

   

  ---------------------------------------- 4)newScheduledThreadPool(int poolsize) -------------------------------------
 

  - Creates a thread pool that can schedule commands to run after a given delay, or to execute periodically.
   

  - Use case : 

    ScheduledExecutorService executor = Executors.newScheduledThreadPool(5);

   - Executing runnable after a fixed delay                  :: executor.schedule(runnable, 2 , TimeUnit.SECONDS) :     
   
   - Executing runnable after a fixed delay and periodically :: executor.scheduleAtFixedRate(runnable, 2 ,2, TimeUnit.SECONDS); :
    
 
 
 -------------------------------------------------------------------------------------------------------------------------
 invokeAll() : Executing Multiple Threads using ExecutorService
 
 
               ExecutorService executorService = Executors.newSingleThreadExecutor();

		Set<Callable<String>> callables = new HashSet<Callable<String>>();

		callables.add(new Callable<String>() {
		    public String call() throws Exception {
		    	Thread.sleep(5000);
		        return "Task 1";
		    }
		});
		
		callables.add(new Callable<String>() {
		    public String call() throws Exception {
		    	Thread.sleep(2000);
		    	//throw new Exception();
		        return "Task 2";
		    }
		});
		
		callables.add(new Callable<String>() {
		    public String call() throws Exception {
		    	Thread.sleep(10000);
		        return "Task 3";
		    }
		});

		List<Future<String>> futures  = executorService.invokeAll(callables);;

		for(Future<String> future : futures){
		    System.out.println("future.get = " + future.get());
		}

		executorService.shutdown();
 

-------------------------------

Types of Methods in ExecutorService to execute Threads : 

execute(Runnable)  : Multiple runnables are submitted in multiple execute() methods 
submit(Runnable)   : Multiple runnables are submitted in multiple submit() methods
submit(Callable)   : Multiple callables are submitted in multiple submit() methods
invokeAll(List of Callables) : : Multiple callables are submitted in ONE invokeAll() method
invokeAny(List of Callables)


Source :http://tutorials.jenkov.com/java-util-concurrent/executorservice.html#invokeall

-----------------------------------------------------------------------------------------------------------
Using Java 8 
-----------------------------------------------------------------------------------------------------------
//1-Using Runnable : No Return Type, Cannot throw exception
ExecutorService executorService = Executors.newCachedThreadPool();
executorService.submit(() -> {
  try {
    Thread.sleep(2000L);
    System.out.println("Executing Task in Runnable Thread");
  }
  catch (InterruptedException e) {
    e.printStackTrace();
   }
});

-------------------------------------------------------------------------------------------------

//2-Using Callable : Return Type of Future, Can throw exception,so no need for try/catch block 
ExecutorService executorService = Executors.newCachedThreadPool();

Future<String> future = executorService.submit(() -> {
   Thread.sleep(2000L);
   return "Executing Task in Callable Thread";
});
		
System.out.println("result = " + future.get());

executor.shutdown();

--------------------------------------------------------------------------------------------------
//3-Using CompletableFture 

i)Using Supplier   : Has a method 'get()'    : that accepts no  argument and returns an object.  

ExecutorService executor = Executors.newCachedThreadPool();
		
CompletableFuture<String> future = CompletableFuture.supplyAsync(new Supplier<String>() {
   @Override
    public String get() {
       try {
	  Thread.sleep(2000L);
	  return "Executing Task1 in seperate Thread";
	} 
       catch (InterruptedException e) {
	  System.out.println("Exception Occured");
       }
				 
      return "Exception Occured in case of Failures";
   }
}, executor);
		
		
		System.out.println(future.get());
