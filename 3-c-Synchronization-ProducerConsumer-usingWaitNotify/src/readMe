
Inter-Thread Communication : 




Fail Fast Fail safe iterator 

 ConcurrentModificationException is thrown when adding, removing or updating any element from collection while a thread is iterating over that collection.
 
 i)Fail-Fast Iterator : 
   Fail-Fast iterators don’t throw any exceptions if a collection is structurally modified while iterating over it.
   To know whether the collection is structurally modified or not, fail-fast iterators use an internal flag called modCount 
   which is updated each time a collection is modified.
   
   Fail-fast iterators checks the modCount flag whenever it gets the next value (i.e. using next() method), and 
   if it finds that the modCount has been modified after this iterator has been created, it throws ConcurrentModificationException
   
  
   Iterator on ArrayList, HashMap , Vector classes.
   
   Preventing ConcurrentModificationException
   
   List<Integer> myList = new ArrayList<>();
        myList.add(1);
		myList.add(2);
		myList.add(3);
		myList.add(4);

		Iterator<Integer> iter = myList.iterator();
		while (iter.hasNext()) {
			Integer value = iter.next();
			System.out.println("List Value:" + value);
			if (value.equals(2))
				myList.remove(value);
		}
   
   
   Steps to avoid ConcurrentModificationException : 
   a)convert the list to an array and then iterate on the array. 
     This approach works well for small or medium size list but if the list is large then it will affect the performance a lot.
   
   b)You can use ConcurrentHashMap and CopyOnWriteArrayList classes.
   
   
   
ii)Fail-Safe Iterator : 
   Fail-Safe iterators don’t throw any exceptions if a collection is structurally modified while iterating over it. 
   This is because, they operate on the clone of the collection, not on the original collection and that’s why they are called fail-safe iterators. 
   
   Iterator on CopyOnWriteArrayList, ConcurrentHashMap classes are examples of fail-safe Iterator.
 
 
 
 